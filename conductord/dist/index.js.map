{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as R from 'ramda';\nimport * as sia from './sia';\nimport * as storj from './storj';\n\nimport { Host, HostType } from './model';\nimport { login, registerNode, sendRecord, setAuthToken, updateNodeSettings } from './api';\n\nimport fs from 'fs';\nimport os from 'os';\nimport schedule from 'node-schedule';\n\nconst readConfig = () => {\n  try {\n    const content = fs.readFileSync('/etc/conductord/config.json');\n    return JSON.parse(content.toString());\n  } catch (err) {\n    console.error(`could not read config file: ${err.message} Please create file at /etc/conductord/config.json and make sure that the JSON is correct.`);\n    process.exit(1);\n  }\n}\n\nconst collect = async (nodeId: string, port: number, type: HostType) => {\n  let record = {};\n  if (type === HostType.SIA) {\n    const resp = await sia.collectHost(port);\n    const spaceUsed = await sia.getStorage(port);\n    record = {\n      type: 'SIA',\n      ...R.pick(\n        ['storagerevenue', 'downloadbandwidthrevenue', 'uploadbandwidthrevenue', 'contractcompensation'],\n        resp.data.financialmetrics,\n      ),\n      spaceUsed,\n      nodeId,\n      createdAt: new Date(),\n    };\n  } else {\n    const spaceUsed = await storj.collect(port);\n    record = {\n      type: 'STORJ',\n      spaceUsed,\n      nodeId,\n      createdAt: new Date(),\n    };\n  }\n  await sendRecord(record);\n  console.log('sent record.');\n};\n\nconst checkNodeSettings = async (node: Host) => {\n  if (node.type === HostType.SIA && node._id) {\n    console.log('collecting node settigns for SIA');\n    const settings = await sia.getHostSettings(node);\n    await updateNodeSettings(node._id, settings);\n  }\n}\n\nconst config = readConfig();\n\nconst ready = async (id: string, hostInfo: Host) => {\n  console.log(`connected to ${hostInfo.type}. Public key or ID is ${id}. Logging in...`);\n  const resp = await login(process.env.NODE_ENV === 'development' ? 'test@adrienmorel.co' : 'hello@adrienmorel.co', 'kronos');\n  console.log(`token: ${resp.data.token}`);\n  setAuthToken(resp.data.token);\n  console.log('login success');\n  let host = resp.data.hosts.find((k: any) => k.hostKey === id);\n  if (!host) {\n    console.log('node is new. Registering');\n    const registerResp = await registerNode({\n      ip: 'localhost',\n      username: os.userInfo().username,\n      nodeType: hostInfo.type,\n      hostKey: id,\n    });\n    host = R.prop('data', registerResp);\n  }\n\n  collect(host._id, hostInfo.port, host.nodeType);\n  const hostWithPort = R.assoc('port', hostInfo.port, host);\n  checkNodeSettings(hostWithPort);\n  schedule.scheduleJob('*/30 * * * *', () => {\n    collect(host._id, host.port, host.nodeType);\n  });\n  schedule.scheduleJob('0 */30 * * *', () => {\n    checkNodeSettings(hostWithPort);\n  });\n}\n\nconfig.hosts.forEach((host: Host) => {\n  if (host.type === HostType.SIA) {\n    console.log(`connecting to sia on port ${host.port}...`);\n    sia.prepare(host).then(async SiaPubKey => {\n      ready(SiaPubKey, host);\n    });\n  } else {\n    storj.prepare(host).then(async id => {\n      ready(id, host);\n    })\n  }\n});\n"]}